# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-04-07 13:12
from __future__ import unicode_literals

import common.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/city/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
            ],
            options={
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/province/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RT',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/rt/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
            ],
            options={
                'verbose_name': 'RT',
            },
        ),
        migrations.CreateModel(
            name='RW',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/rw/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
            ],
            options={
                'verbose_name': 'RW',
            },
        ),
        migrations.CreateModel(
            name='Subdistrict',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/subdistrict/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolevels.City', verbose_name='City')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Polygon')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
                ('geojson', models.FileField(blank=True, null=True, upload_to='geolevels/village/', validators=[common.validators.MimetypeValidator(('text/plain', 'application/json')), common.validators.FileSizeValidator(1)], verbose_name='GeoJSON')),
                ('subdistrict', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolevels.Subdistrict', verbose_name='Subdistrict')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='rw',
            name='village',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolevels.Village', verbose_name='Village'),
        ),
        migrations.AddField(
            model_name='rt',
            name='rw',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolevels.RW', verbose_name='RW'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolevels.Province', verbose_name='Province'),
        ),
    ]
